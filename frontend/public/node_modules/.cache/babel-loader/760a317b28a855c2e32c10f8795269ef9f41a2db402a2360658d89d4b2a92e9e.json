{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_FAIL, LOGIN_SUCCESS, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, CLEAR_ERRORS } from \"../constants/userConstants\";\nimport axios from \"axios\";\n\n//Login\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v1/login`, {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//Register\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v1/register`, userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//Load User\nexport const logout = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/me`);\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//Logout User\nexport const loadUser = () => async dispatch => {\n  try {\n    await axios.get(`/api/v1/logout`);\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//Update Profile\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/me/update`, userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//Update Password\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PA_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/me/update`, userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//Clearing Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["LOGIN_REQUEST","LOGIN_FAIL","LOGIN_SUCCESS","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","CLEAR_ERRORS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","userData","logout","get","loadUser","updateProfile","put","success","updatePassword","passwords","UPDATE_PA_REQUEST","clearErrors"],"sources":["C:/Users/anant/OneDrive/Desktop/Project/Coir-Grow/frontend/src/actions/userAction.js"],"sourcesContent":["\r\nimport {\r\n    LOGIN_REQUEST,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS, \r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_FAIL,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    UPDATE_PROFILE_REQUEST,\r\n    UPDATE_PROFILE_SUCCESS,\r\n    UPDATE_PROFILE_FAIL,\r\n    UPDATE_PASSWORD_REQUEST,\r\n    UPDATE_PASSWORD_SUCCESS,\r\n    UPDATE_PASSWORD_FAIL,\r\n    CLEAR_ERRORS,    \r\n} from \"../constants/userConstants\";\r\nimport axios from \"axios\";\r\n\r\n//Login\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try{\r\n        dispatch({ type: LOGIN_REQUEST });\r\n        \r\n        const config = {headers: { \"Content-Type\": \"application/json\" } };\r\n\r\n        const { data } = await axios.post(\r\n            `/api/v1/login`,\r\n            {email, password},\r\n            config\r\n        );\r\n\r\n      dispatch({ type: LOGIN_SUCCESS, payload:data.user }); \r\n    } catch (error) {\r\n        dispatch({ type: LOGIN_FAIL, payload: error.response.data.message});\r\n    }\r\n};\r\n\r\n//Register\r\nexport const register = (userData) => async (dispatch) => {\r\n    try{\r\n        dispatch({ type: REGISTER_USER_REQUEST });\r\n\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" }};\r\n\r\n        const { data } = await axios.post(\r\n            `/api/v1/register`,\r\n             userData, config\r\n          );\r\n\r\n        dispatch({ type: REGISTER_USER_SUCCESS, payload: data.user });\r\n    } catch (error) {\r\n       dispatch({\r\n        type: REGISTER_USER_FAIL,\r\n        payload: error.response.data.message,\r\n       }); \r\n    }\r\n};\r\n\r\n\r\n//Load User\r\nexport const logout = () => async (dispatch) => {\r\n    try{\r\n        dispatch({ type: LOAD_USER_REQUEST });\r\n\r\n        const { data } = await axios.get(`/api/v1/me`);\r\n\r\n      dispatch({ type: LOAD_USER_SUCCESS, payload:data.user }); \r\n    } catch (error) {\r\n        dispatch({ type: LOAD_USER_FAIL, payload: error.response.data.message});\r\n    }\r\n};\r\n\r\n//Logout User\r\nexport const loadUser = () => async (dispatch) => {\r\n    try{\r\n\r\n      await axios.get(`/api/v1/logout`);\r\n\r\n      dispatch({ type: LOGOUT_SUCCESS }); \r\n    } catch (error) {\r\n        dispatch({ type: LOGOUT_FAIL, payload: error.response.data.message});\r\n    }\r\n};\r\n\r\n\r\n//Update Profile\r\nexport const updateProfile = (userData) => async (dispatch) => {\r\n    try{\r\n        dispatch({ type: UPDATE_PROFILE_REQUEST });\r\n\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" }};\r\n\r\n        const { data } = await axios.put(\r\n            `/api/v1/me/update`,\r\n             userData, config\r\n          );\r\n\r\n        dispatch({ type: UPDATE_PROFILE_SUCCESS, payload: data.success });\r\n    } catch (error) {\r\n       dispatch({\r\n        type: UPDATE_PROFILE_FAIL,\r\n        payload: error.response.data.message,\r\n       }); \r\n    }\r\n};\r\n\r\n//Update Password\r\nexport const updatePassword = (passwords) => async (dispatch) => {\r\n    try{\r\n        dispatch({ type: UPDATE_PA_REQUEST });\r\n\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" }};\r\n\r\n        const { data } = await axios.put(\r\n            `/api/v1/me/update`,\r\n             userData, config\r\n          );\r\n\r\n        dispatch({ type: UPDATE_PROFILE_SUCCESS, payload: data.success });\r\n    } catch (error) {\r\n       dispatch({\r\n        type: UPDATE_PROFILE_FAIL,\r\n        payload: error.response.data.message,\r\n       }); \r\n    }\r\n};\r\n\r\n\r\n\r\n//Clearing Errors\r\nexport const clearErrors = ()=> async (dispatch) =>{\r\n    dispatch({ type: CLEAR_ERRORS});\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}